// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/virtual-disk-array/vda/pkg/proto/portalapi (interfaces: PortalClient)

// Package mockportalapi is a generated GoMock package.
package mockportalapi

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	portalapi "github.com/virtual-disk-array/vda/pkg/proto/portalapi"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPortalClient is a mock of PortalClient interface
type MockPortalClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortalClientMockRecorder
}

// MockPortalClientMockRecorder is the mock recorder for MockPortalClient
type MockPortalClientMockRecorder struct {
	mock *MockPortalClient
}

// NewMockPortalClient creates a new mock instance
func NewMockPortalClient(ctrl *gomock.Controller) *MockPortalClient {
	mock := &MockPortalClient{ctrl: ctrl}
	mock.recorder = &MockPortalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortalClient) EXPECT() *MockPortalClientMockRecorder {
	return m.recorder
}

// CreateCn mocks base method
func (m *MockPortalClient) CreateCn(arg0 context.Context, arg1 *portalapi.CreateCnRequest, arg2 ...grpc.CallOption) (*portalapi.CreateCnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCn", varargs...)
	ret0, _ := ret[0].(*portalapi.CreateCnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCn indicates an expected call of CreateCn
func (mr *MockPortalClientMockRecorder) CreateCn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCn", reflect.TypeOf((*MockPortalClient)(nil).CreateCn), varargs...)
}

// CreateDa mocks base method
func (m *MockPortalClient) CreateDa(arg0 context.Context, arg1 *portalapi.CreateDaRequest, arg2 ...grpc.CallOption) (*portalapi.CreateDaReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDa", varargs...)
	ret0, _ := ret[0].(*portalapi.CreateDaReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDa indicates an expected call of CreateDa
func (mr *MockPortalClientMockRecorder) CreateDa(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDa", reflect.TypeOf((*MockPortalClient)(nil).CreateDa), varargs...)
}

// CreateDn mocks base method
func (m *MockPortalClient) CreateDn(arg0 context.Context, arg1 *portalapi.CreateDnRequest, arg2 ...grpc.CallOption) (*portalapi.CreateDnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDn", varargs...)
	ret0, _ := ret[0].(*portalapi.CreateDnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDn indicates an expected call of CreateDn
func (mr *MockPortalClientMockRecorder) CreateDn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDn", reflect.TypeOf((*MockPortalClient)(nil).CreateDn), varargs...)
}

// CreateExp mocks base method
func (m *MockPortalClient) CreateExp(arg0 context.Context, arg1 *portalapi.CreateExpRequest, arg2 ...grpc.CallOption) (*portalapi.CreateExpReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExp", varargs...)
	ret0, _ := ret[0].(*portalapi.CreateExpReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExp indicates an expected call of CreateExp
func (mr *MockPortalClientMockRecorder) CreateExp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExp", reflect.TypeOf((*MockPortalClient)(nil).CreateExp), varargs...)
}

// CreatePd mocks base method
func (m *MockPortalClient) CreatePd(arg0 context.Context, arg1 *portalapi.CreatePdRequest, arg2 ...grpc.CallOption) (*portalapi.CreatePdReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePd", varargs...)
	ret0, _ := ret[0].(*portalapi.CreatePdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePd indicates an expected call of CreatePd
func (mr *MockPortalClientMockRecorder) CreatePd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePd", reflect.TypeOf((*MockPortalClient)(nil).CreatePd), varargs...)
}

// DeleteCn mocks base method
func (m *MockPortalClient) DeleteCn(arg0 context.Context, arg1 *portalapi.DeleteCnRequest, arg2 ...grpc.CallOption) (*portalapi.DeleteCnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCn", varargs...)
	ret0, _ := ret[0].(*portalapi.DeleteCnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCn indicates an expected call of DeleteCn
func (mr *MockPortalClientMockRecorder) DeleteCn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCn", reflect.TypeOf((*MockPortalClient)(nil).DeleteCn), varargs...)
}

// DeleteDa mocks base method
func (m *MockPortalClient) DeleteDa(arg0 context.Context, arg1 *portalapi.DeleteDaRequest, arg2 ...grpc.CallOption) (*portalapi.DeleteDaReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDa", varargs...)
	ret0, _ := ret[0].(*portalapi.DeleteDaReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDa indicates an expected call of DeleteDa
func (mr *MockPortalClientMockRecorder) DeleteDa(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDa", reflect.TypeOf((*MockPortalClient)(nil).DeleteDa), varargs...)
}

// DeleteDn mocks base method
func (m *MockPortalClient) DeleteDn(arg0 context.Context, arg1 *portalapi.DeleteDnRequest, arg2 ...grpc.CallOption) (*portalapi.DeleteDnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDn", varargs...)
	ret0, _ := ret[0].(*portalapi.DeleteDnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDn indicates an expected call of DeleteDn
func (mr *MockPortalClientMockRecorder) DeleteDn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDn", reflect.TypeOf((*MockPortalClient)(nil).DeleteDn), varargs...)
}

// DeleteExp mocks base method
func (m *MockPortalClient) DeleteExp(arg0 context.Context, arg1 *portalapi.DeleteExpRequest, arg2 ...grpc.CallOption) (*portalapi.DeleteExpReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExp", varargs...)
	ret0, _ := ret[0].(*portalapi.DeleteExpReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExp indicates an expected call of DeleteExp
func (mr *MockPortalClientMockRecorder) DeleteExp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExp", reflect.TypeOf((*MockPortalClient)(nil).DeleteExp), varargs...)
}

// DeletePd mocks base method
func (m *MockPortalClient) DeletePd(arg0 context.Context, arg1 *portalapi.DeletePdRequest, arg2 ...grpc.CallOption) (*portalapi.DeletePdReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePd", varargs...)
	ret0, _ := ret[0].(*portalapi.DeletePdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePd indicates an expected call of DeletePd
func (mr *MockPortalClientMockRecorder) DeletePd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePd", reflect.TypeOf((*MockPortalClient)(nil).DeletePd), varargs...)
}

// GetCn mocks base method
func (m *MockPortalClient) GetCn(arg0 context.Context, arg1 *portalapi.GetCnRequest, arg2 ...grpc.CallOption) (*portalapi.GetCnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCn", varargs...)
	ret0, _ := ret[0].(*portalapi.GetCnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCn indicates an expected call of GetCn
func (mr *MockPortalClientMockRecorder) GetCn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCn", reflect.TypeOf((*MockPortalClient)(nil).GetCn), varargs...)
}

// GetDa mocks base method
func (m *MockPortalClient) GetDa(arg0 context.Context, arg1 *portalapi.GetDaRequest, arg2 ...grpc.CallOption) (*portalapi.GetDaReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDa", varargs...)
	ret0, _ := ret[0].(*portalapi.GetDaReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDa indicates an expected call of GetDa
func (mr *MockPortalClientMockRecorder) GetDa(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDa", reflect.TypeOf((*MockPortalClient)(nil).GetDa), varargs...)
}

// GetDn mocks base method
func (m *MockPortalClient) GetDn(arg0 context.Context, arg1 *portalapi.GetDnRequest, arg2 ...grpc.CallOption) (*portalapi.GetDnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDn", varargs...)
	ret0, _ := ret[0].(*portalapi.GetDnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDn indicates an expected call of GetDn
func (mr *MockPortalClientMockRecorder) GetDn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDn", reflect.TypeOf((*MockPortalClient)(nil).GetDn), varargs...)
}

// GetExp mocks base method
func (m *MockPortalClient) GetExp(arg0 context.Context, arg1 *portalapi.GetExpRequest, arg2 ...grpc.CallOption) (*portalapi.GetExpReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExp", varargs...)
	ret0, _ := ret[0].(*portalapi.GetExpReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExp indicates an expected call of GetExp
func (mr *MockPortalClientMockRecorder) GetExp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExp", reflect.TypeOf((*MockPortalClient)(nil).GetExp), varargs...)
}

// GetPd mocks base method
func (m *MockPortalClient) GetPd(arg0 context.Context, arg1 *portalapi.GetPdRequest, arg2 ...grpc.CallOption) (*portalapi.GetPdReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPd", varargs...)
	ret0, _ := ret[0].(*portalapi.GetPdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPd indicates an expected call of GetPd
func (mr *MockPortalClientMockRecorder) GetPd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPd", reflect.TypeOf((*MockPortalClient)(nil).GetPd), varargs...)
}

// ListCn mocks base method
func (m *MockPortalClient) ListCn(arg0 context.Context, arg1 *portalapi.ListCnRequest, arg2 ...grpc.CallOption) (*portalapi.ListCnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCn", varargs...)
	ret0, _ := ret[0].(*portalapi.ListCnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCn indicates an expected call of ListCn
func (mr *MockPortalClientMockRecorder) ListCn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCn", reflect.TypeOf((*MockPortalClient)(nil).ListCn), varargs...)
}

// ListDa mocks base method
func (m *MockPortalClient) ListDa(arg0 context.Context, arg1 *portalapi.ListDaRequest, arg2 ...grpc.CallOption) (*portalapi.ListDaReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDa", varargs...)
	ret0, _ := ret[0].(*portalapi.ListDaReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDa indicates an expected call of ListDa
func (mr *MockPortalClientMockRecorder) ListDa(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDa", reflect.TypeOf((*MockPortalClient)(nil).ListDa), varargs...)
}

// ListDn mocks base method
func (m *MockPortalClient) ListDn(arg0 context.Context, arg1 *portalapi.ListDnRequest, arg2 ...grpc.CallOption) (*portalapi.ListDnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDn", varargs...)
	ret0, _ := ret[0].(*portalapi.ListDnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDn indicates an expected call of ListDn
func (mr *MockPortalClientMockRecorder) ListDn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDn", reflect.TypeOf((*MockPortalClient)(nil).ListDn), varargs...)
}

// ListExp mocks base method
func (m *MockPortalClient) ListExp(arg0 context.Context, arg1 *portalapi.ListExpRequest, arg2 ...grpc.CallOption) (*portalapi.ListExpReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExp", varargs...)
	ret0, _ := ret[0].(*portalapi.ListExpReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExp indicates an expected call of ListExp
func (mr *MockPortalClientMockRecorder) ListExp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExp", reflect.TypeOf((*MockPortalClient)(nil).ListExp), varargs...)
}

// ListPd mocks base method
func (m *MockPortalClient) ListPd(arg0 context.Context, arg1 *portalapi.ListPdRequest, arg2 ...grpc.CallOption) (*portalapi.ListPdReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPd", varargs...)
	ret0, _ := ret[0].(*portalapi.ListPdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPd indicates an expected call of ListPd
func (mr *MockPortalClientMockRecorder) ListPd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPd", reflect.TypeOf((*MockPortalClient)(nil).ListPd), varargs...)
}

// ManualSyncupCn mocks base method
func (m *MockPortalClient) ManualSyncupCn(arg0 context.Context, arg1 *portalapi.ManualSyncupCnRequest, arg2 ...grpc.CallOption) (*portalapi.ManualSyncupCnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ManualSyncupCn", varargs...)
	ret0, _ := ret[0].(*portalapi.ManualSyncupCnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManualSyncupCn indicates an expected call of ManualSyncupCn
func (mr *MockPortalClientMockRecorder) ManualSyncupCn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualSyncupCn", reflect.TypeOf((*MockPortalClient)(nil).ManualSyncupCn), varargs...)
}

// ManualSyncupDa mocks base method
func (m *MockPortalClient) ManualSyncupDa(arg0 context.Context, arg1 *portalapi.ManualSyncupDaRequest, arg2 ...grpc.CallOption) (*portalapi.ManualSyncupDaReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ManualSyncupDa", varargs...)
	ret0, _ := ret[0].(*portalapi.ManualSyncupDaReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManualSyncupDa indicates an expected call of ManualSyncupDa
func (mr *MockPortalClientMockRecorder) ManualSyncupDa(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualSyncupDa", reflect.TypeOf((*MockPortalClient)(nil).ManualSyncupDa), varargs...)
}

// ManualSyncupDn mocks base method
func (m *MockPortalClient) ManualSyncupDn(arg0 context.Context, arg1 *portalapi.ManualSyncupDnRequest, arg2 ...grpc.CallOption) (*portalapi.ManualSyncupDnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ManualSyncupDn", varargs...)
	ret0, _ := ret[0].(*portalapi.ManualSyncupDnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManualSyncupDn indicates an expected call of ManualSyncupDn
func (mr *MockPortalClientMockRecorder) ManualSyncupDn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualSyncupDn", reflect.TypeOf((*MockPortalClient)(nil).ManualSyncupDn), varargs...)
}

// ModifyCn mocks base method
func (m *MockPortalClient) ModifyCn(arg0 context.Context, arg1 *portalapi.ModifyCnRequest, arg2 ...grpc.CallOption) (*portalapi.ModifyCnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyCn", varargs...)
	ret0, _ := ret[0].(*portalapi.ModifyCnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyCn indicates an expected call of ModifyCn
func (mr *MockPortalClientMockRecorder) ModifyCn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyCn", reflect.TypeOf((*MockPortalClient)(nil).ModifyCn), varargs...)
}

// ModifyDa mocks base method
func (m *MockPortalClient) ModifyDa(arg0 context.Context, arg1 *portalapi.ModifyDaRequest, arg2 ...grpc.CallOption) (*portalapi.ModifyDaReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDa", varargs...)
	ret0, _ := ret[0].(*portalapi.ModifyDaReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDa indicates an expected call of ModifyDa
func (mr *MockPortalClientMockRecorder) ModifyDa(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDa", reflect.TypeOf((*MockPortalClient)(nil).ModifyDa), varargs...)
}

// ModifyDn mocks base method
func (m *MockPortalClient) ModifyDn(arg0 context.Context, arg1 *portalapi.ModifyDnRequest, arg2 ...grpc.CallOption) (*portalapi.ModifyDnReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDn", varargs...)
	ret0, _ := ret[0].(*portalapi.ModifyDnReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDn indicates an expected call of ModifyDn
func (mr *MockPortalClientMockRecorder) ModifyDn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDn", reflect.TypeOf((*MockPortalClient)(nil).ModifyDn), varargs...)
}

// ModifyExp mocks base method
func (m *MockPortalClient) ModifyExp(arg0 context.Context, arg1 *portalapi.ModifyExpRequest, arg2 ...grpc.CallOption) (*portalapi.ModifyExpReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyExp", varargs...)
	ret0, _ := ret[0].(*portalapi.ModifyExpReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyExp indicates an expected call of ModifyExp
func (mr *MockPortalClientMockRecorder) ModifyExp(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyExp", reflect.TypeOf((*MockPortalClient)(nil).ModifyExp), varargs...)
}

// ModifyPd mocks base method
func (m *MockPortalClient) ModifyPd(arg0 context.Context, arg1 *portalapi.ModifyPdRequest, arg2 ...grpc.CallOption) (*portalapi.ModifyPdReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyPd", varargs...)
	ret0, _ := ret[0].(*portalapi.ModifyPdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyPd indicates an expected call of ModifyPd
func (mr *MockPortalClientMockRecorder) ModifyPd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyPd", reflect.TypeOf((*MockPortalClient)(nil).ModifyPd), varargs...)
}
