// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/virtual-disk-array/vda/pkg/csidriver (interfaces: NodeOperatorInterface)

// Package mockcsidriver is a generated GoMock package.
package mockcsidriver

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNodeOperatorInterface is a mock of NodeOperatorInterface interface
type MockNodeOperatorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNodeOperatorInterfaceMockRecorder
}

// MockNodeOperatorInterfaceMockRecorder is the mock recorder for MockNodeOperatorInterface
type MockNodeOperatorInterfaceMockRecorder struct {
	mock *MockNodeOperatorInterface
}

// NewMockNodeOperatorInterface creates a new mock instance
func NewMockNodeOperatorInterface(ctrl *gomock.Controller) *MockNodeOperatorInterface {
	mock := &MockNodeOperatorInterface{ctrl: ctrl}
	mock.recorder = &MockNodeOperatorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeOperatorInterface) EXPECT() *MockNodeOperatorInterfaceMockRecorder {
	return m.recorder
}

// CheckDeviceReady mocks base method
func (m *MockNodeOperatorInterface) CheckDeviceReady(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeviceReady", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDeviceReady indicates an expected call of CheckDeviceReady
func (mr *MockNodeOperatorInterfaceMockRecorder) CheckDeviceReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeviceReady", reflect.TypeOf((*MockNodeOperatorInterface)(nil).CheckDeviceReady), arg0)
}

// DeleteMountPoint mocks base method
func (m *MockNodeOperatorInterface) DeleteMountPoint(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMountPoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMountPoint indicates an expected call of DeleteMountPoint
func (mr *MockNodeOperatorInterfaceMockRecorder) DeleteMountPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMountPoint", reflect.TypeOf((*MockNodeOperatorInterface)(nil).DeleteMountPoint), arg0)
}

// ExecWithTimeout mocks base method
func (m *MockNodeOperatorInterface) ExecWithTimeout(arg0 []string, arg1 int, arg2 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecWithTimeout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecWithTimeout indicates an expected call of ExecWithTimeout
func (mr *MockNodeOperatorInterfaceMockRecorder) ExecWithTimeout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecWithTimeout", reflect.TypeOf((*MockNodeOperatorInterface)(nil).ExecWithTimeout), arg0, arg1, arg2)
}

// Mount mocks base method
func (m *MockNodeOperatorInterface) Mount(arg0, arg1, arg2 string, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount
func (mr *MockNodeOperatorInterfaceMockRecorder) Mount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockNodeOperatorInterface)(nil).Mount), arg0, arg1, arg2, arg3)
}

// MountAndFormat mocks base method
func (m *MockNodeOperatorInterface) MountAndFormat(arg0, arg1, arg2 string, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountAndFormat", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountAndFormat indicates an expected call of MountAndFormat
func (mr *MockNodeOperatorInterfaceMockRecorder) MountAndFormat(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountAndFormat", reflect.TypeOf((*MockNodeOperatorInterface)(nil).MountAndFormat), arg0, arg1, arg2, arg3)
}

// WaitForDeviceGone mocks base method
func (m *MockNodeOperatorInterface) WaitForDeviceGone(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDeviceGone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForDeviceGone indicates an expected call of WaitForDeviceGone
func (mr *MockNodeOperatorInterfaceMockRecorder) WaitForDeviceGone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDeviceGone", reflect.TypeOf((*MockNodeOperatorInterface)(nil).WaitForDeviceGone), arg0, arg1)
}

// WaitForDeviceReady mocks base method
func (m *MockNodeOperatorInterface) WaitForDeviceReady(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDeviceReady", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForDeviceReady indicates an expected call of WaitForDeviceReady
func (mr *MockNodeOperatorInterfaceMockRecorder) WaitForDeviceReady(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDeviceReady", reflect.TypeOf((*MockNodeOperatorInterface)(nil).WaitForDeviceReady), arg0, arg1)
}
